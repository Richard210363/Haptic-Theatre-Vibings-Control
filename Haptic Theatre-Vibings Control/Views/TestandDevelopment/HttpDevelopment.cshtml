@using Haptic_Theatre_Vibings_Control.Classes
@model Haptic_Theatre_Vibings_Control.Models.HttpViewModel

@Html.Hidden("view", @"~\Views\TestandDevelopment\HttpDevelopment.cshtml")

<div class="jumbotron">
    @{ Html.RenderPartial("_ShowRunning"); }
    <h1>Http Development </h1>   
    <ol class="breadcrumb">
        <li>@Html.ActionLink("Home", "Index", "Home")</li>
        <li>@Html.ActionLink("Development", "Index", "TestandDevelopment")</li>
        <li class="active">Http Development</li>
    </ol>
</div>
<body>
    
</body>

<div class="row">
    @*Area 1  *@
    <div class="col-md-4">

        <div class="panel panel-default">
            <div class="panel-body">
                <h3>TCP/IP Commands</h3>
            </div>
        </div>
        <div>
            @using (Html.BeginForm("SendTcpMessage", "TestandDevelopment", FormMethod.Post, new { id = "TCPForm" }))
            {
                <h4>Request</h4>
                @Html.TextBoxFor(m => m.HttpRequest, new { @class = "form-control input-lg" })
                <h4>Port Nunber</h4>
                @Html.TextBoxFor(m => m.HttpPortNumber, new { @class = "form-control input-sm" })
                @Html.RadioButtonFor(model => model.HttpRequestType, HttpRequestType.Get, new { @Id = "get" })
                <label for="get">Get</label>
                @Html.RadioButtonFor(model => model.HttpRequestType, HttpRequestType.Post, new { @Id = "post" })
                <label for="post">Post</label>

                <p></p>
            }
            <input type="submit" id="TCPSubmit" value="Send Request" />

        </div>
        <p>
            <h4>Result</h4>
            <div id="resultPaneTCP">
                @Html.Partial("_HttpResponse", Model)
            </div>
        </p>
    </div>

    @*Area 2  *@
    <div class="col-md-4">

        <div class="panel panel-default">
            <div class="panel-body">
                <h3>UDP Commands<br /></h3>
            </div>
        </div>


        <div>
            @using (Html.BeginForm("SendUdpBroadcast", "TestandDevelopment", FormMethod.Post, new { id = "UDPCommandForm" }))
            {
                <h4>Command</h4>
                @Html.TextBoxFor(m => m.HttpRequest, new { @class = "form-control input-lg" })
                <h4>Port Nunber</h4>
                @Html.TextBoxFor(m => m.HttpPortNumber, new { @class = "form-control input-sm" })

                <p></p>
                <input type="submit" id="UDPSubmit" value="Send Request" />
            }
        </div>
    </div>

    @*Area 3  *@
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>
                    Sensor Data<br />
                </h3>
            </div>
        </div>
        <p></p>
        <h4>Message Received</h4>
        <div id="receivePaneEmulator">
            @Html.Partial("_HttpResponse", Model)
        </div>
        <div id="UDPSensorForm">
        <h4>Port Nunber</h4>
            @Html.TextBoxFor(m => m.HttpPortNumber, new { @class = "form-control input-sm" })
        <p></p>
        <input type="button" id="EmulatorSubmit" value="Receive UDP Messages" />
        <p></p>
        <input type="button" id="EmulatorSubmit_Record" value="Record UDP Messages" />
            <p>
                <h4>Activity Note</h4>
                <div id="activityNote">
                    @Html.TextAreaFor(m => m.ActivityNote, new { @class = "form-control", rows = "5" })
                </div>
            </p>
    </div>
    </div>
</div> 

@section scripts {

    <script type="text/javascript">

        $('#TCPSubmit').click(function (event) {
            //alert("TCPSubmit");
            $('#resultPaneTCP').html("<div class='spinner'><div class='dot1'></div><div class='dot2'></div></div>");
            event.preventDefault();
            $.ajax({
                url: "@Url.Action("SendTcpMessage", "TestandDevelopment")",
                type: "POST",
                data: $('#TCPForm').serialize(),
                datatype: "text",
                success: function (data) {
                    $('#resultPaneTCP').html(data);
                }
            });
        });

        $('#UDPSubmit').click(function (event) {
            //alert("UDPSubmit");
            $('#resultPaneUDP').html("<div class='spinner'><div class='dot1'></div><div class='dot2'></div></div>");
            event.preventDefault();
            $.ajax({
                url: "@Url.Action("SendUdpBroadcast", "TestandDevelopment")",
                type: "POST",
            data: $('#UDPCommandForm').serialize(),
            datatype: "text",
            success: function (data) {}
        });
        return false;
        });

        var udpReceiveTimer;

        $('#EmulatorSubmit').click(function (event) {
            //alert("EmulatorSubmit");
            debugger;
            if ($(this).val() == "Receive UDP Messages") {
                udpReceiveTimer = setInterval(getUDPMessages, 100);
                $('#EmulatorSubmit').attr('value', 'Stop Receiving UDP Messages');
            } else {
                //alert("stoping");
                clearInterval(udpReceiveTimer);
                $('#EmulatorSubmit').attr('value', 'Receive UDP Messages');
                cancelGetUDPMessages();
            }
        });

        function getUDPMessages() {
            $.ajax({
                url: "@Url.Action("ReceiveUDPMessage", "TestandDevelopment")",
                type: "POST",
                data: $('#UDPSensorForm :input').serialize(),
                datatype: "text",
                success: function (data) {
                    $('#receivePaneEmulator').html(data);
                }
            });
        };

        function cancelGetUDPMessages() {
            $.ajax({
                url: "@Url.Action("CancelReceiveUDPMessage", "TestandDevelopment")",
                type: "POST",
                data: $('#UDPSensorForm :input').serialize(),
                datatype: "text",
                success: function () { }
            });
        };






        $('#EmulatorSubmit_Record').click(function (event) {
            //alert("EmulatorSubmit");
            if ($(this).val() == "Record UDP Messages") {
                udpReceiveTimer = setInterval(recordUDPMessages, 100);
                $('#EmulatorSubmit_Record').attr('value', 'Stop Recording UDP Messages');
            } else {
                //alert("stoping");
                clearInterval(udpReceiveTimer);
                $('#EmulatorSubmit_Record').attr('value', 'Record UDP Messages');
                cancelRecordUDPMessage();
            }
        });

        function recordUDPMessages() {
            $.ajax({
                url: "@Url.Action("RecordUDPMessage", "TestandDevelopment")",
                type: "POST",
                data: $('#UDPSensorForm :input').serialize(),
                datatype: "text",
                success: function (data) {
                $('#receivePaneEmulator').html(data);
            }
        });
        };

        function cancelRecordUDPMessage() {
            $.ajax({
                url: "@Url.Action("CancelRecordUDPMessage", "TestandDevelopment")",
                type: "POST",
                data: $('#UDPSensorForm :input').serialize(),
                datatype: "text",
                success: function () { }
        });
        };

    </script>
}

